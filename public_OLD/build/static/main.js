'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var internal = require('svelte/internal');
var Navaid = _interopDefault(require('navaid'));
var svelte = require('svelte');

// TODO: This file is temporary and needs to be removed at some point.
// It should get automatically generated by plenti based on the "content/" folder.
const nodes = [
    {
        "path": "/blog/post1",
        "type": "blog_posts",
        "filename": "post1.json",
        "fields": {
            "title": "Post 1",
            "description": "First blog post."
        }
    },
    {
        "path": "/blog/post2",
        "type": "blog_posts",
        "filename": "post2.json",
        "fields": {
            "title": "Post 2",
            "description": "Second blog post."
        }
    },
    {
        "path": "/blog/post3",
        "type": "blog_posts",
        "filename": "post-3_has_a_long_filename.json",
        "fields": {
            "title": "Post 3",
            "description": "Third of the blog posts."
        }
    },
    {
        "path": "/about",
        "type": "pages",
        "filename": "about.json",
        "fields": {
            "title": "About Page",
            "description": "This is the about page"
        }
    },
    {
        "path": "/anything",
        "type": "pages",
        "filename": "anything.json",
        "fields": {
            "title": "Anything!",
            "description": "The amazing anything page..."
        }
    },
    {
        "path": "/",
        "type": "index",
        "filename": "_index.json",
        "fields": {
            "name": "Plenti"
        }
    }
];

class DataSource {

  constructor() {}

  static getNode(uri) {
    let content;
    nodes.map(node => {
      if (node.path == uri) {
        content = node;
      }
    });
    return content ? content : '';
  }

  static getAllNodes() {
    let content = nodes.map(node => {
      return node;
    });
    return content;
  }
}

/* layout/global/head.svelte generated by Svelte v3.20.1 */

const Head = internal.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { title } = $$props;
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);

	return `<head><meta charset="${"utf-8"}">
  <meta name="${"viewport"}" content="${"width=device-width,initial-scale=1"}">

  <title>${internal.escape(title)}</title>

  <link href="${"https://fonts.googleapis.com/css2?family=Rubik:ital,wght@0,300;0,700;1,300&display=swap"}" rel="${"stylesheet"}">
  <link rel="${"icon"}" type="${"image/png"}" href="${"/favicon.png"}">
  <link rel="${"stylesheet"}" href="${"/build/bundle.css"}"></head>`;
});

/* layout/global/nav.svelte generated by Svelte v3.20.1 */

const css = {
	code: "nav.svelte-1pz3ylm{min-height:60px;display:flex;align-items:center;box-shadow:0px 2px 3px var(--base)}.container.svelte-1pz3ylm{display:flex}#brand.svelte-1pz3ylm{flex:1}",
	map: "{\"version\":3,\"file\":\"nav.svelte\",\"sources\":[\"nav.svelte\"],\"sourcesContent\":[\"<nav>\\n  <div class=\\\"container\\\">\\n    <span id=\\\"brand\\\"><a href=\\\"/\\\">Home</a></span>\\n    <a href=\\\"/about\\\">About</a>&nbsp;\\n    <a href=\\\"/anything\\\">Anything</a>\\n  </div>\\n</nav>\\n\\n<style>\\n  nav {\\n    min-height: 60px;\\n    display: flex;\\n    align-items: center;\\n    box-shadow: 0px 2px 3px var(--base);\\n  }\\n  .container {\\n    display: flex;\\n  }\\n  #brand {\\n    flex: 1;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AASE,GAAG,eAAC,CAAC,AACH,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,AACrC,CAAC,AACD,UAAU,eAAC,CAAC,AACV,OAAO,CAAE,IAAI,AACf,CAAC,AACD,MAAM,eAAC,CAAC,AACN,IAAI,CAAE,CAAC,AACT,CAAC\"}"
};

const Nav = internal.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	$$result.css.add(css);

	return `<nav class="${"svelte-1pz3ylm"}"><div class="${"container svelte-1pz3ylm"}"><span id="${"brand"}" class="${"svelte-1pz3ylm"}"><a href="${"/"}">Home</a></span>
    <a href="${"/about"}">About</a> 
    <a href="${"/anything"}">Anything</a></div>
</nav>`;
});

/* layout/global/footer.svelte generated by Svelte v3.20.1 */

const css$1 = {
	code: "footer.svelte-n69rq5{min-height:200px;display:flex;align-items:center;background-color:var(--base);margin-top:100px}",
	map: "{\"version\":3,\"file\":\"footer.svelte\",\"sources\":[\"footer.svelte\"],\"sourcesContent\":[\"<script>\\n  export let allNodes;\\n</script>\\n<footer>\\n  <div class=\\\"container\\\">\\n    <span>All nodes:</span>\\n    {#each allNodes as node}\\n      {#if node.fields.title}\\n        <a href=\\\"{node.path}\\\">{node.fields.title}</a>&nbsp;\\n      {/if}\\n    {/each}\\n  </div>\\n</footer>\\n\\n<style>\\n  footer {\\n    min-height: 200px;\\n    display: flex;\\n    align-items: center;\\n    background-color: var(--base);\\n    margin-top: 100px;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAeE,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,gBAAgB,CAAE,IAAI,MAAM,CAAC,CAC7B,UAAU,CAAE,KAAK,AACnB,CAAC\"}"
};

const Footer = internal.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { allNodes } = $$props;
	if ($$props.allNodes === void 0 && $$bindings.allNodes && allNodes !== void 0) $$bindings.allNodes(allNodes);
	$$result.css.add(css$1);

	return `<footer class="${"svelte-n69rq5"}"><div class="${"container"}"><span>All nodes:</span>
    ${internal.each(allNodes, node => `${node.fields.title
	? `<a${internal.add_attribute("href", node.path, 0)}>${internal.escape(node.fields.title)}</a> `
	: ``}`)}</div>
</footer>`;
});

/* layout/scripts/make_title.svelte generated by Svelte v3.20.1 */

const makeTitle = filename => {
	if (filename == "_index.json") {
		return "Home";
	} else if (filename) {
		// Remove file extension.
		filename = filename.split(".").slice(0, -1).join(".");

		// Convert underscores and hyphens to spaces.
		filename = filename.replace(/_|-/g, " ");

		// Capitalize first letter of each word.
		filename = filename.split(" ").map(s => s.charAt(0).toUpperCase() + s.substring(1)).join(" ");
	}

	return filename;
};

const Make_title = internal.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	return ``;
});

/* layout/global/html.svelte generated by Svelte v3.20.1 */

const css$2 = {
	code: "body.svelte-8fbqk6{font-family:'Rubik', sans-serif;display:flex;flex-direction:column;margin:0}main.svelte-8fbqk6{flex-grow:1}.container{max-width:1024px;margin:0 auto;flex-grow:1}:root{--primary:(50, 50, 50);--accent:rgb(1, 1, 1);--base:rgb(245, 245, 245)}",
	map: "{\"version\":3,\"file\":\"html.svelte\",\"sources\":[\"html.svelte\"],\"sourcesContent\":[\"<script>\\n  import Head from './head.svelte';\\n  import Nav from './nav.svelte';\\n  import Footer from './footer.svelte';\\n  import { makeTitle } from '../scripts/make_title.svelte';\\n\\n  export let Route, node, allNodes;\\n</script>\\n\\n<html lang=\\\"en\\\">\\n<Head title={makeTitle(node.filename)} />\\n<body>\\n  <Nav />\\n  <main>\\n    <div class=\\\"container\\\">\\n      <svelte:component this={Route} {...node.fields} {allNodes} />\\n      <br />\\n      <details>\\n        <summary>Click to show Route class</summary>\\n        <pre>{Route}</pre>\\n      </details>\\n    </div>\\n  </main>\\n  <Footer {allNodes} />\\n</body>\\n</html>\\n\\n<style>\\n  body {\\n    font-family: 'Rubik', sans-serif;\\n    display: flex;\\n    flex-direction: column;\\n    margin: 0;\\n  }\\n  main {\\n    flex-grow: 1;\\n  }\\n  :global(.container) {\\n    max-width: 1024px;\\n    margin: 0 auto;\\n    flex-grow: 1;\\n  }\\n  :global(:root) {\\n    --primary: (50, 50, 50);\\n    --accent: rgb(1, 1, 1);\\n    --base: rgb(245, 245, 245);\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AA4BE,IAAI,cAAC,CAAC,AACJ,WAAW,CAAE,OAAO,CAAC,CAAC,UAAU,CAChC,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,CAAC,AACX,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,CAAC,AACd,CAAC,AACO,UAAU,AAAE,CAAC,AACnB,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,SAAS,CAAE,CAAC,AACd,CAAC,AACO,KAAK,AAAE,CAAC,AACd,SAAS,CAAE,YAAY,CACvB,QAAQ,CAAE,YAAY,CACtB,MAAM,CAAE,kBAAkB,AAC5B,CAAC\"}"
};

const Html = internal.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { Route } = $$props, { node } = $$props, { allNodes } = $$props;
	if ($$props.Route === void 0 && $$bindings.Route && Route !== void 0) $$bindings.Route(Route);
	if ($$props.node === void 0 && $$bindings.node && node !== void 0) $$bindings.node(node);
	if ($$props.allNodes === void 0 && $$bindings.allNodes && allNodes !== void 0) $$bindings.allNodes(allNodes);
	$$result.css.add(css$2);

	return `<html lang="${"en"}">${internal.validate_component(Head, "Head").$$render($$result, { title: makeTitle(node.filename) }, {}, {})}
<body class="${"svelte-8fbqk6"}">${internal.validate_component(Nav, "Nav").$$render($$result, {}, {}, {})}
  <main class="${"svelte-8fbqk6"}"><div class="${"container"}">${internal.validate_component(Route || internal.missing_component, "svelte:component").$$render($$result, Object.assign(node.fields, { allNodes }), {}, {})}
      <br>
      <details><summary>Click to show Route class</summary>
        <pre>${internal.escape(Route)}</pre></details></div></main>
  ${internal.validate_component(Footer, "Footer").$$render($$result, { allNodes }, {}, {})}</body>
</html>`;
});

/* layout/ejected/client_router.svelte generated by Svelte v3.20.1 */

const Client_router = internal.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let Route, node, allNodes;
	let uri = location.pathname;
	node = DataSource.getNode(uri);
	allNodes = DataSource.getAllNodes();

	function draw(m) {
		Route = m.default;
		window.scrollTo(0, 0);
	}

	function track(obj) {
		uri = obj.state || obj.uri;
		if (window.ga) ga.send("pageview", { dp: uri });
		node = DataSource.getNode(uri);
		allNodes = DataSource.getAllNodes();
	}

	addEventListener("replacestate", track);
	addEventListener("pushstate", track);
	addEventListener("popstate", track);
	const router = Navaid("/").on("/", () => new Promise(function (resolve) { resolve(require('./index-1da2da3a.js')); }).then(draw)).on("/:slug", () => new Promise(function (resolve) { resolve(require('./pages-8c73701b.js')); }).then(draw)).on("/blog/:slug", () => new Promise(function (resolve) { resolve(require('./blog_posts-049b2f8d.js')); }).then(draw)).listen();
	svelte.onDestroy(router.unlisten);
	return `${internal.validate_component(Html, "Html").$$render($$result, { Route, node, allNodes }, {}, {})}`;
});

if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/jim-service-worker.js')
  .then((reg) => {
    console.log('Service Worker registration succeeded.');
  }).catch((error) => {
    console.log('Service Worker registration failed with ' + error);
  });
} else {
  console.log('Service Workers not supported by browser');
}

const replaceContainer = function ( Component, options ) {
  const frag = document.createDocumentFragment();
  const component = new Component( Object.assign( {}, options, { target: frag } ));
  if (options.target) {
    options.target.replaceWith( frag );
  }
  return component;
};

const app = replaceContainer( Client_router, {
  target: document.querySelector( '#hydrate-plenti' ),
  props: {}
});

module.exports = app;
//# sourceMappingURL=main.js.map


(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, b as space, t as text, c as attr_dev, f as add_location, g as insert_dev, h as append_dev, j as set_data_dev, n as noop, k as detach_dev } from './main-00e836e5.js';

/* layout/content/Index.svelte generated by Svelte v3.20.1 */

const file = "layout/content/Index.svelte";

function create_fragment(ctx) {
	let section;
	let img;
	let img_src_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let p;
	let t3;
	let a;
	let t5;
	let t6;
	let h3;

	const block = {
		c: function create() {
			section = element("section");
			img = element("img");
			t0 = space();
			h1 = element("h1");
			t1 = text(/*name*/ ctx[0]);
			t2 = space();
			p = element("p");
			t3 = text("Visit the ");
			a = element("a");
			a.textContent = "Svelte tutorial";
			t5 = text(" to learn how to build Svelte apps.");
			t6 = space();
			h3 = element("h3");
			h3.textContent = "Recent blog posts:";
			attr_dev(img, "alt", "plenti logo");
			if (img.src !== (img_src_value = "/build/plenti.svg")) attr_dev(img, "src", img_src_value);
			add_location(img, file, 5, 1, 60);
			add_location(h1, file, 6, 1, 111);
			attr_dev(a, "href", "https://svelte.dev/tutorial");
			add_location(a, file, 7, 14, 141);
			add_location(p, file, 7, 1, 128);
			add_location(h3, file, 8, 1, 239);
			attr_dev(section, "id", "intro");
			add_location(section, file, 4, 0, 38);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, img);
			append_dev(section, t0);
			append_dev(section, h1);
			append_dev(h1, t1);
			append_dev(section, t2);
			append_dev(section, p);
			append_dev(p, t3);
			append_dev(p, a);
			append_dev(p, t5);
			append_dev(section, t6);
			append_dev(section, h3);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data_dev(t1, /*name*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { name } = $$props;
	const writable_props = ["name"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Index", $$slots, []);

	$$self.$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
	};

	$$self.$capture_state = () => ({ name });

	$$self.$inject_state = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name];
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Index",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<Index> was created without expected prop 'name'");
		}
	}

	get name() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Index;
//# sourceMappingURL=Index-a6488e10.js.map

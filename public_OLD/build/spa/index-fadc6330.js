
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, b as space, c as attr_dev, f as add_location, g as insert_dev, h as append_dev, n as noop, j as detach_dev, t as text, k as create_component, m as mount_component, l as set_data_dev, o as transition_in, p as transition_out, q as destroy_component } from './main-e4de4821.js';

/* layout/components/grid.svelte generated by Svelte v3.20.1 */

const file = "layout/components/grid.svelte";

function create_fragment(ctx) {
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;

	const block = {
		c: function create() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			div2 = element("div");
			attr_dev(div0, "class", "grid-item green svelte-11t5aph");
			add_location(div0, file, 1, 2, 21);
			attr_dev(div1, "class", "grid-item red svelte-11t5aph");
			add_location(div1, file, 2, 2, 59);
			attr_dev(div2, "class", "grid-item blue svelte-11t5aph");
			add_location(div2, file, 3, 2, 95);
			attr_dev(div3, "class", "grid svelte-11t5aph");
			add_location(div3, file, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			append_dev(div3, t0);
			append_dev(div3, div1);
			append_dev(div3, t1);
			append_dev(div3, div2);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Grid> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Grid", $$slots, []);
	return [];
}

class Grid extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Grid",
			options,
			id: create_fragment.name
		});
	}
}

/* layout/content/index.svelte generated by Svelte v3.20.1 */
const file$1 = "layout/content/index.svelte";

function create_fragment$1(ctx) {
	let h1;
	let t0;
	let t1;
	let section;
	let p;
	let t2;
	let a;
	let t4;
	let t5;
	let h3;
	let t7;
	let ul;
	let current;

	const grid = new Grid({
			props: { allNodes: /*allNodes*/ ctx[1] },
			$$inline: true
		});

	const block = {
		c: function create() {
			h1 = element("h1");
			t0 = text(/*name*/ ctx[0]);
			t1 = space();
			section = element("section");
			p = element("p");
			t2 = text("Visit the ");
			a = element("a");
			a.textContent = "Svelte tutorial";
			t4 = text(" to learn how to build Svelte apps.");
			t5 = space();
			h3 = element("h3");
			h3.textContent = "Recent blog posts:";
			t7 = space();
			ul = element("ul");
			create_component(grid.$$.fragment);
			add_location(h1, file$1, 6, 0, 108);
			attr_dev(a, "href", "https://svelte.dev/tutorial");
			add_location(a, file$1, 8, 14, 159);
			add_location(p, file$1, 8, 1, 146);
			add_location(h3, file$1, 9, 1, 257);
			add_location(ul, file$1, 10, 2, 287);
			attr_dev(section, "id", "intro");
			add_location(section, file$1, 7, 0, 124);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, p);
			append_dev(p, t2);
			append_dev(p, a);
			append_dev(p, t4);
			append_dev(section, t5);
			append_dev(section, h3);
			append_dev(section, t7);
			append_dev(section, ul);
			mount_component(grid, ul, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*name*/ 1) set_data_dev(t0, /*name*/ ctx[0]);
			const grid_changes = {};
			if (dirty & /*allNodes*/ 2) grid_changes.allNodes = /*allNodes*/ ctx[1];
			grid.$set(grid_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(grid.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(grid.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(section);
			destroy_component(grid);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let { allNodes } = $$props;
	const writable_props = ["name", "allNodes"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Content> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Content", $$slots, []);

	$$self.$set = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("allNodes" in $$props) $$invalidate(1, allNodes = $$props.allNodes);
	};

	$$self.$capture_state = () => ({ name, allNodes, Grid });

	$$self.$inject_state = $$props => {
		if ("name" in $$props) $$invalidate(0, name = $$props.name);
		if ("allNodes" in $$props) $$invalidate(1, allNodes = $$props.allNodes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name, allNodes];
}

class Content extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { name: 0, allNodes: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Content",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !("name" in props)) {
			console.warn("<Content> was created without expected prop 'name'");
		}

		if (/*allNodes*/ ctx[1] === undefined && !("allNodes" in props)) {
			console.warn("<Content> was created without expected prop 'allNodes'");
		}
	}

	get name() {
		throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get allNodes() {
		throw new Error("<Content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set allNodes(value) {
		throw new Error("<Content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Content;
//# sourceMappingURL=index-fadc6330.js.map

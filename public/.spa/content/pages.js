/* generated by Svelte v3.20.1 */
import {
	SvelteComponent,
	append,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../web_modules/svelte/internal.js";

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let p0;
	let t3;
	let div2;
	let div0;
	let strong0;
	let span0;
	let t5;
	let t6;
	let div1;
	let strong1;
	let span1;
	let t8;
	let t9;
	let p1;

	return {
		c() {
			h1 = element("h1");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p0 = element("p");
			p0.innerHTML = `<em>Page template</em>`;
			t3 = space();
			div2 = element("div");
			div0 = element("div");
			strong0 = element("strong");
			strong0.textContent = "Title: ";
			span0 = element("span");
			t5 = text(/*title*/ ctx[0]);
			t6 = space();
			div1 = element("div");
			strong1 = element("strong");
			strong1.textContent = "Desc: ";
			span1 = element("span");
			t8 = text(/*description*/ ctx[1]);
			t9 = space();
			p1 = element("p");
			p1.innerHTML = `<a href="/">Back home</a>`;
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, p0, anchor);
			insert(target, t3, anchor);
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, strong0);
			append(div0, span0);
			append(span0, t5);
			append(div2, t6);
			append(div2, div1);
			append(div1, strong1);
			append(div1, span1);
			append(span1, t8);
			insert(target, t9, anchor);
			insert(target, p1, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*title*/ 1) set_data(t5, /*title*/ ctx[0]);
			if (dirty & /*description*/ 2) set_data(t8, /*description*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(p0);
			if (detaching) detach(t3);
			if (detaching) detach(div2);
			if (detaching) detach(t9);
			if (detaching) detach(p1);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props, { description } = $$props;

	$$self.$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("description" in $$props) $$invalidate(1, description = $$props.description);
	};

	return [title, description];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, description: 1 });
	}
}

export default Component;